{"version":3,"sources":["components/EntryProvider.js","components/mood/MoodProvider.js","components/Entry.js","components/EntryList.js","components/Blog.js","DailyJournal.js","serviceWorker.js","index.js"],"names":["EntryContext","React","createContext","EntryProvider","props","useState","entries","setEntries","entry","setEntry","getEntries","fetch","then","res","json","Provider","value","addEntry","Entry","method","headers","body","JSON","stringify","deleteEntry","id","updateEntry","getEntryById","searchEntries","searchTerm","children","MoodContext","MoodProvider","moods","setMoods","getMoods","find","m","moodId","useContext","className","dir","title","length","onClick","navigator","clipboard","writeText","toast","dark","handleCopyText","content","style","fontSize","href","moment","diaryDate","format","target","aria-hidden","EntryList","filteredEntries","setTerm","count","setCount","page","setPage","pagesArr","setPagesArr","loading","setLoading","searchEntires","axios","params","_limit","_start","_q","_sort","data","pieces","pages","i","pagesCount","push","console","log","useEffect","onChange","e","aria-label","map","x","idx","key","handlePageClick","Blog","paddingTop","paddingBottom","DailyJournal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52dc9f16.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n/*\n    The context is imported and used by individual components\n    that need data\n*/\nexport const EntryContext = React.createContext();\n\n/*\n This component establishes what data can be used.\n */\nexport const EntryProvider = (props) => {\n  const [entries, setEntries] = useState([]);\n  const [entry, setEntry] = useState({});\n\n  const getEntries = () => {\n    return fetch(\"http://localhost:8088/entries\")\n      .then((res) => res.json())\n      .then(setEntries);\n  };\n\n  const searchEntries = (searchTerm) => {\n    return fetch(`http://localhost:8088/entries?q=${searchTerm}`)\n      .then((res) => res.json())\n      .then(setEntries);\n  };\n\n  const getEntryById = (id) => {\n    return fetch(`http://localhost:8088/entries/${id}`)\n      .then((res) => res.json())\n      .then(setEntry);\n  };\n\n  const addEntry = (Entry) => {\n    return fetch(\"http://localhost:8088/entries\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(Entry)\n    }).then(getEntries);\n  };\n\n  const deleteEntry = (entry) => {\n    return fetch(`http://localhost:8088/entries/${entry.id}`, {\n      method: \"DELETE\"\n    }).then(getEntries);\n  };\n\n  const updateEntry = (entry) => {\n    return fetch(`http://localhost:8088/entries/${entry.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(entry)\n    }).then(getEntries);\n  };\n\n  return (\n    <EntryContext.Provider\n      value={{\n        entries,\n        getEntries,\n        addEntry,\n        deleteEntry,\n        updateEntry,\n        getEntryById,\n        entry,\n        setEntry,\n        searchEntries\n      }}\n    >\n      {props.children}\n    </EntryContext.Provider>\n  );\n};\n","import React, { useState } from \"react\";\n\n/*\n    The context is imported and used by individual components\n    that need data\n*/\nexport const MoodContext = React.createContext();\n\n/*\n This component establishes what data can be used.\n */\nexport const MoodProvider = (props) => {\n  const [moods, setMoods] = useState([]);\n\n  const getMoods = () => {\n    return fetch(\"http://localhost:8088/moods\")\n      .then((res) => res.json())\n      .then(setMoods);\n  };\n  return (\n    <MoodContext.Provider\n      value={{\n        moods,\n        getMoods\n      }}\n    >\n      {props.children}\n    </MoodContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { EntryContext } from \"./EntryProvider\";\nimport * as moment from \"moment\";\nimport { toast } from \"react-toastify\";\nimport \"./Entry.css\";\n\nexport const Entry = ({ entry, moods }) => {\n  const mood = moods.find((m) => m.id === entry.moodId);\n  const { deleteEntry, getEntryById } = useContext(EntryContext);\n  const handleCopyText = (entry) => {\n    navigator.clipboard.writeText(\"Copy this text to clipboard\");\n    toast.dark(entry.title + \" copied\");\n  };\n  return (\n    <section className=\"entry\">\n      <div dir=\"auto\" className=\"post-preview\">\n        <a>\n          <h2 className=\"post-title text-capitalize droid-arabic-kufi d-flex align-items-center\">\n            {entry.title != null && entry.title.length > 0 ? (\n              <span>{entry.title}</span>\n            ) : (\n              <small className=\"text-italic no-title\">No title</small>\n            )}\n\n            <button\n              className=\"btn btn-link text-white\"\n              onClick={() => handleCopyText(entry)}\n            >\n              <i className=\"fas fa-copy\"></i>\n            </button>\n          </h2>\n          <p className=\"post-subtitle droid-arabic-kufi\">{entry.content}</p>\n        </a>\n        <p className=\"post-meta\">\n          <a style={{ fontSize: 10 }} href=\"#!\">\n            Published on\n          </a>\n\n          {moment(entry.diaryDate).format(\"dddd, MMMM Do YYYY\")}\n        </p>\n      </div>\n\n      <hr className=\"my-4\" />\n      <div className=\"d-none\">\n        <button\n          className=\"btn btn-danger\"\n          onClick={() => {\n            deleteEntry(entry);\n          }}\n        >\n          Delete\n        </button>\n        <a\n          target=\"_blank\"\n          href={\n            \"http://localhost:1337/admin/plugins/content-manager/collectionType/application::shredden-pieces.shredden-pieces/\" +\n            entry.id\n          }\n          className=\"btn\"\n          onClick={() => {\n            getEntryById(entry.id);\n          }}\n        >\n          <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n          Edit\n        </a>\n      </div>\n    </section>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { EntryContext } from \"./EntryProvider\";\nimport { Entry } from \"./Entry\";\nimport { MoodContext } from \"./mood/MoodProvider\";\nimport * as axios from \"axios\";\nimport \"./EntryList.css\";\nexport const EntryList = () => {\n  const { entries, searchEntries } = useContext(EntryContext);\n  const { moods, getMoods } = useContext(MoodContext);\n  const [filteredEntries, setEntries] = useState([]);\n  const [searchTerm, setTerm] = useState(\"\");\n  const [count, setCount] = useState(1);\n  const [moodSelected, setMoodSelected] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [pagesArr, setPagesArr] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const searchEntires = () => {\n    setLoading(true);\n    axios\n      .get(\"https://mohabamroo.com/api/shredden-pieces/search\", {\n        params: {\n          _limit: 30,\n          _start: (page - 1) * 30,\n          _q: searchTerm,\n          _sort: \"diaryDate:DESC\"\n        }\n      })\n      .then((res) => {\n        setLoading(false);\n        setEntries(res.data.pieces);\n        setCount(res.data.count);\n        let pages = [];\n        let i = 1;\n        let pagesCount = res.data.count / 30;\n        while (i <= pagesCount) {\n          pages.push(i);\n          i++;\n        }\n        setPagesArr(pages);\n        console.log(\"EntryList -> res\", entries);\n      });\n  };\n\n  const handlePageClick = (page) => {\n    setPage(page);\n    console.log(\"handlePageClick -> page\", page);\n  };\n\n  const handleNextPage = () => {\n    if (page < pagesArr.length) setPage(page + 1);\n  };\n  const handlePreviousPage = () => {\n    if (page > 1) setPage(page - 1);\n  };\n  useEffect(() => {\n    searchEntires(\"\");\n  }, [page, searchTerm]);\n\n  return (\n    <>\n      <div className=\"container px-4 px-lg-5\">\n        <div className=\"row pt-4 gx-4 gx-lg-5 justify-content-center\">\n          <h1 className=\"py-4 text-left\">Total Pieces ({count})</h1>\n          {/* Search Row */}\n          <div className=\"search-row form-group d-flex\">\n            <input\n              onChange={(e) => setTerm(e.target.value)}\n              className=\"form-control\"\n            />\n            <button\n              onClick={() => searchEntires(searchTerm)}\n              className=\"btn text-white flex-1\"\n            >\n              <i className=\"fa fa-search mr-2\" aria-hidden=\"true\"></i>\n              <span>Search</span>\n            </button>\n          </div>\n          {/* Pagination Array */}\n          <div className=\"col-12\">\n            <nav\n              className=\"overflow-scroll\"\n              aria-label=\"Page navigation example\"\n            >\n              <ul className=\"pagination\">\n                <li className=\"page-item\">\n                  <a\n                    onClick={() => handlePreviousPage()}\n                    className=\"btn btn-link text-white\"\n                    aria-label=\"Previous\"\n                  >\n                    <span aria-hidden=\"true\">&laquo;</span>\n                    <span className=\"sr-only\">Previous</span>\n                  </a>\n                </li>\n                {pagesArr.map((x, idx) => (\n                  <li key={x} className=\"page-item\">\n                    <a\n                      className={\n                        \"btn btn-link text-white \" +\n                        (x == page ? \" text-bold\" : \"\")\n                      }\n                      onClick={() => handlePageClick(x)}\n                    >\n                      {x}\n                    </a>\n                  </li>\n                ))}\n\n                <li className=\"page-item\">\n                  <a\n                    onClick={() => handleNextPage()}\n                    className=\"btn btn-link text-white\"\n                    aria-label=\"Next\"\n                  >\n                    <span className=\"sr-only\">Next</span>\n                    <span aria-hidden=\"true\">&raquo;</span>\n                  </a>\n                </li>\n              </ul>\n            </nav>\n          </div>\n\n          {loading && (\n            <div className=\"d-flex justify-content-center container text-center margin-auto\">\n              <div className=\"loader\"></div>\n            </div>\n          )}\n          <div\n            className={\n              \"col-md-10 col-lg-8 col-xl-7\" + (loading ? \"d-none\" : \"\")\n            }\n          >\n            {/* Post Preview */}\n\n            <div className=\"entries\">\n              {filteredEntries.map((entry) => {\n                return <Entry key={entry.id} entry={entry} moods={moods} />;\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import \"./Blog.css\";\nimport React, { useContext } from \"react\";\nimport { EntryList } from \"./EntryList\";\n\nexport const Blog = (props) => {\n  return (\n    <>\n      <header className=\"masthead\" style={{ paddingTop: 0, paddingBottom: 0 }}>\n        <section className=\"parallax-container\">\n          <div className=\"site-heading\">\n            <h1>Pieces of mind</h1>\n            <span className=\"subheading\">by a ruthless nihilist</span>\n          </div>\n        </section>\n      </header>\n      <section className=\"buffer\">\n        <p className=\"mt-0 mb-0 container droid-arabic-kufi text-right text-white py-5\">\n          أنكتب للغير أم لأنفسنا\n          <br />\n          <br />\n          أنكتب للتوثيق أم لإحداث تغيير\n          <br />\n          أنكتب وفاء للماضي أم أملًا في المستقبل\n          <br />\n          أنكتب عِرفانًا أم طمعاً\n          <br />\n          لماذا نكتب\n          <br />\n          ونشغل أنفسنا بالتسجيل\n          <br />\n          بتدوين التاريخ\n          <br />\n          لماذا نهتم بما سبق\n          <br />\n          ولماذا أحيانًا نهتم بإيصال المعنى\n          <br />\n          للآخر\n          <br />\n          لماذا نهتم بترك أثر\n          <br />\n          ولماذا أكتب أنا؟\n          <br />\n          أكتب لأوّثق الأفكار\n          <br />\n          وتارة أكتب رجاءً\n          <br />\n          وأخرى اعتذارًا\n          <br />\n          أكتب وفاء لنفسي\n          <br />\n          وأكتب طمعًا في أن يراني الآخر\n          <br />\n          وأكتب وضاعة لا أحتمل قولها\n        </p>\n      </section>\n      <section className=\"parallax-container parallax-container2\">\n        <EntryList />\n      </section>\n    </>\n  );\n};\n","import React from \"react\";\nimport { EntryProvider } from \"./components/EntryProvider\";\nimport { EntryForm } from \"./components/EntryForm\";\nimport { Blog } from \"./components/Blog\";\n\nimport { MoodProvider } from \"./components/mood/MoodProvider\";\n\nexport const DailyJournal = () => {\n  return (\n    <div className=\"DailyJournal\">\n      <EntryProvider>\n        <MoodProvider>\n          <Blog />\n          {/* <EntryForm /> */}\n        </MoodProvider>\n      </EntryProvider>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { DailyJournal } from \"./DailyJournal\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DailyJournal />\n    <ToastContainer\n      position=\"top-right\"\n      autoClose={5000}\n      hideProgressBar={false}\n      newestOnTop={false}\n      closeOnClick\n      rtl={false}\n      pauseOnFocusLoss\n      draggable\n      pauseOnHover\n    />\n    {/* Same as */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}